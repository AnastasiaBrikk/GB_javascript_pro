"use strict"

//Task1 Вы разрабатываете прототип веб-приложения для чтения новостей. Статьи "хранятся" во внутреннем массиве
// (имитируя базу данных). Когда пользователь нажимает на кнопку "Загрузить новости", ваш код должен
// имитировать задержку, словно происходит реальная загрузка данных из внешнего источника, а после этой
// задержки — отображать новости на странице.
// 1. Создайте базовую HTML-структуру с кнопкой для загрузки новостей и контейнером для их отображения.
// 2. Реализуйте функцию fetchNews(), возвращающую промис. Эта функция должна имитировать
// задержку в 2 секунды перед успешным возвращением данных из "виртуальной" базы данных. Для
// добавления интереса: с вероятностью 10% она должна возвращать ошибку вместо данных.
// 3. При нажатии на кнопку "Загрузить новости" вызывайте функцию fetchNews(), обрабатывая успешное
// выполнение и ошибки с использованием then() и catch().
// 4. При успешной загрузке отобразите статьи на странице. При ошибке покажите сообщение об ошибке.
// 5. Добавьте функционал, который отключает кнопку загрузки на время "загрузки" новостей и активирует
// её снова после завершения операции (будь то успешная загрузка или ошибка).


// const news = [
//   {
//     title: "title1",
//     text: "newnewnenwnenenennennenen1",
//   },
//   {
//     title: "title2",
//     text: "newnewnenwnenenennennenen2",
//   },
//   {
//     title: "title3",
//     text: "newnewnenwnenenennennenen3",
//   },
//   {
//     title: "title4",
//     text: "newnewnenwnenenennennenen4",
//   },
// ];

// const newsDiv = document.querySelector(".news");
// const btn = document.querySelector(".button");

// btn.addEventListener("click", function () {
//   btn.disabled = true;
//   fetchNews()
//     .then((news) => {
//       for (const article of news) {
//         let h1 = document.createElement("h1");
//         let p = document.createElement("p");
//         let articleDiv = document.createElement("div");
//         h1.textContent = article.title;
//         p.textContent = article.text;
//         articleDiv.append(h1);
//         articleDiv.append(p);
//         newsDiv.prepend(articleDiv);
//       }
//     })
//     .catch((error) => {
//       let errorDiv = document.createElement("div");
//       errorDiv.textContent = error;
//       newsDiv.append(errorDiv);
//     })
//     .finally(() => {
//       btn.disabled = false;
//     });
// });

// function fetchNews() {
//   let chanse = Math.floor(Math.random() * 100);
//   return new Promise((resolve, reject) => {
//     setTimeout(() => {
//       if (chanse > 10) {
//         return resolve(news);
//       } else {
//         return reject("Error");
//       }
//     }, 2000);
//   });
// }

// Task 2. Создать интерактивную веб-страницу, где пользователи могут выбирать различные элементы мебели
// (например, столы, стулья, диваны) и их параметры (материал, цвет, стиль). Выбранные параметры должны
// быть сохранены так, чтобы при повторном посещении сайта пользователь мог видеть свой ранее собранный
// комплект мебели.
// 1. Пользователи могут выбирать из различных типов мебели (например, столы, стулья, диваны).
// 2. Для каждого типа мебели доступен выбор параметров (цвет, материал, стиль).
// 3. Предусмотреть кнопку "Сохранить комплект", при нажатии на которую текущий выбор пользователя
// сохраняется в куки.
// 4. При повторном посещении сайта автоматически загружать сохраненные параметры из куки и
// отображать ранее созданный комплект.
// 5. Предусмотреть возможность для пользователя очистить сохраненные настройки через специальную
// кнопку.
// 6. После нажатия на кнопку "Сохранить" на странице должен отображаться выбранный комплект.
// 7. При нажатии на кнопку "Очистить" должно появляться сообщение о том, что выбор не сделан и
// предыдущие настройки удалены(из куки).

const saveBtn = document.querySelector("#save-btn");
const loadBtn = document.querySelector("#load-btn");
const clearBtn = document.querySelector("#clear-btn");






